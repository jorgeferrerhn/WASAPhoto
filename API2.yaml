openapi: 3.0.3
info:
  title: Simplified login API specification
  description: |-
    This OpenAPI document describes the simplified login API.
    Copy and paste the API from the `paths` key to your OpenAPI document.
  version: "1"


paths: 

  
  /session/{userId}:
    parameters:
      - name: userId
        schema: 
          type: integer
        in: path
        required: true
        description: userId

    get: 
      summary: user searched by its userId
      operationId: getUserProfile
      description: |
        Obtains an user by its userId. It returns a list with the attributes of the user, or "Error" if not found.
        
      responses:
        "200": { $ref: "#/components/responses/UserInfo" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "404": { description: User not found}
        "500": { $ref: "#/components/responses/InternalServerError" }


  /session/{userId}/stream:
    get: 
      parameters:
      - name: userId
        schema: {$ref: "#/components/schemas/IntegerOK"}
        in: path
        required: true
        description: userId
      
      
      summary: Stream of photos of a user
      operationId: getStream
      description: |
        Obtains the stream of photos of a user searched by its userId. It returns a list with all the photos in inverse chronological order
        
      responses:
        "200": { $ref: "#/components/responses/UserInfo" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "404": { description: User not found}
        "500": { $ref: "#/components/responses/InternalServerError" }


  /session/login:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
        
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Username"
        required: true


      responses:
        '201': { $ref: "#/components/responses/OKInteger" }
        '401': { $ref: "#/components/responses/ErrorInteger" }
                
  /session/{userId}/uploadPhoto:
    post:
      parameters:
      - name: userId
        schema: 
          type: integer
        in: path
        required: true
        description: userId

    
      tags: ["uploadPhoto"]
      summary: Uploads a photo by the user
      description: |-
        Uploads a photo by the logged user and it appends to the beginning of the list
        
      operationId: uploadPhoto
      requestBody:
        description: User photo upload
        content:
          image/png:
            schema:
              type: string
              format: binary
        required: true


      responses:
        '201': { $ref: '#/components/responses/OKInteger' }
        '401': { $ref: "#/components/responses/ErrorInteger" }



  /session/{userId}/commentPhoto:
    post:
      parameters:
      - name: userId
        schema: 
          type: integer
        in: path
        required: true
        description: userId
        
      - in: query
        name: photoID
        schema:
          type: integer
        required: true
        description: ID of the photo to be commented
        
        
      
      
      tags: ["commentPhoto"]
      summary: Comments a photo of a user
      description: |-
        The logged user comments a photo of another user. Each photo has a unique identifier, so we won't have to specify the user.
        
      operationId: commentPhoto
      requestBody:
        description: Comment to be added to the requested photo.
        content:
          
          text/plain:
            schema:
              type: string
              description: Photo comment.
              example: "Wow, such a nice picture!"
        required: true


      responses:
        '201': { $ref: '#/components/responses/OKInteger' }
        '401': { $ref: "#/components/responses/ErrorInteger" }
                
                
  /session/{userId}/setUserName:
    put:
      parameters:
      - name: userId
        schema: 
          type: integer
        in: path
        required: true
        description: userId
        
      - in: query
        name: newUsername
        schema: {$ref: "#/components/schemas/Username"}
        required: true
        description: new username
        
        
      
      
      tags: ["setMyUserName"]
      summary: Given the user ID, changes username of the user
      description: |-
        The logged user changes its username. It returns 0 if it has been correctly updated, or -1 if an error has occurred.
        
      operationId: setMyUserName
      

      responses:
        '201': { $ref: '#/components/responses/OKInteger' }
        '401': { $ref: "#/components/responses/ErrorInteger" }
                
                

  /session/{userId}/followUser:
    put:
      parameters:
      - name: userId
        schema: 
          type: integer
        in: path
        required: true
        description: userId
        
      - in: query
        name: followedUserID
        schema: 
          type: integer
        required: true

        
        
        
        
      
      
      tags: ["followUser"]
      summary: Given a user ID, the logged user follows it.
      description: |-
        The logged user follows the user identified by the parameter. It returns 0 if it has been correctly followed, or -1 if an error has occurred (already followed or not found).
        
      operationId: followUser
      

      responses:
        '201': { $ref: '#/components/responses/OKInteger' }
        '401': { $ref: "#/components/responses/ErrorInteger" }
                
  /session/{userId}/banUser:
    put:
      parameters:
      - name: userId
        schema: 
          type: integer
        in: path
        required: true
        description: userId
        
      - in: query
        name: targetUserID
        schema: 
          type: integer
        required: true

        
        
        
        
      
      
      tags: ["banUser"]
      summary: Given a user ID, the logged user bans it.
      description: |-
        The logged user bans the user identified by the parameter. It returns 0 if it has been correctly banned, or -1 if an error has occurred (already banned or not found).
        
      operationId: banUser
      

      responses:
        '201': { $ref: '#/components/responses/OKInteger' }
        '401': { $ref: "#/components/responses/ErrorInteger" }
  
  /session/{userId}/unfollowUser:
    put:
      parameters:
      - name: userId
        schema: 
          type: integer
        in: path
        required: true
        description: userId
        
      - in: query
        name: followedUserID
        schema: 
          type: integer
        required: true

        
      
      
      tags: ["followUser"]
      summary: Given a user ID, the logged user unfollows it.
      description: |-
        The logged user unfollows the user identified by the parameter. It returns 0 if it has been correctly unfollowed, or -1 if an error has occurred (previously not followed or not found).
        
      operationId: unfollowUser
      

      responses:
        '201': { $ref: '#/components/responses/OKInteger' }
        '401': { $ref: "#/components/responses/ErrorInteger" }
  
components:

  responses:
  
    UserInfo:
      description: Information related to the user
      content:
        application/json:
          schema:
            type: array
            items:
              type: string
              
              
    OKInteger: 
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/IntegerOK"
            
    ErrorInteger: 
      description: User ID not found or another error occurred.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/IntegerError"

              
    BadRequest:
      description: |
        The request was not compliant with the documentation
        (eg. missing fields, etc).

    InternalServerError:
      description: |
        The server encountered an internal error.
        Further info in server logs.

  schemas:
    
    
    IntegerOK:
      type: integer
      example: 1
        
    IntegerError:
      type: integer
      example: -1
    
          
    Username:
      type: string
      example: "Maria"
      readOnly: true
      minLength: 3
      maxLength: 16
    
    

      
      