openapi: 3.0.3
info:
  title: Simplified login API specification
  description: |-
    This OpenAPI document describes the simplified login API.
    Copy and paste the API from the `paths` key to your OpenAPI document.
  version: "1"


paths: 

  /session/doLogin:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
        
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: string
              example: "Maria"
              readOnly: true
              minLength: 3
              maxLength: 16
        required: true


      responses:
        '201': 
          description: User identifier
          content:
            text/plain:
              schema:
                type: integer
                example: 9013213

        '401':            
          description: Access token is missing or invalid
        
        '404': 
          description: Resource not found.       
          content:         
            application/json:           
              schema:             
                type: integer             
                example: -1

        
  /users/{userId}/getUserProfile:
    parameters:
      - name: userId
        schema: 
          type: integer
        in: path
        required: true
        description: userId

    get: 
      summary: user searched by its userId
      operationId: getUserProfile
      description: |
        Obtains an user by its userId. It returns a list with the attributes of the user, or -1 if not found.
        
      tags: ["getUserProfile"]

      responses:
        "200": 
          description: Information related to the user
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: "Maria"
    
                  profilePictureID:
                    type: integer
                    example: 123912
                  
                  
                  followers: #we only store the followers, not the followed 
                    type: array
                    items: 
                      type: string 
                      
                      
                  photos: 
                    description: Stream of photos
                    
                    type: array
                    items:
                      type: object
                      properties:
                        
                        photoID: 
                          type: integer
                          
                        likes: 
                          type: array
                          items:
                            type: string
                          
                        
                        comments:
                          type: array
                          items: 
                            type: object
                            properties: 
                              user:
                                type: string
                              comment:
                                type: string
                                
                        date: 
                          type: string
                          format: date-time
                          description: Creation date and time
                          
                      
                    
        "400":  
          description: |
            The request was not compliant with the documentation
            (eg. missing fields, etc).
  
        '404': 
          description: Resource not found.       
          content:         
            application/json:           
              schema:             
                type: integer             
                example: -1
        "500": 
          description: |
            The server encountered an internal error.
            Further info in server logs.


  /users/{userId}/getMyStream:
    get: 
      parameters:
      - name: userId
        schema: 
          type: integer
        in: path
        required: true
        description: userId
      

      tags: ["getUserStream"]
      
      summary: Stream of photos of a user
      operationId: getMyStream
      description: |
        Obtains the stream of photos of a user searched by its userId. It returns a list with all the photos in inverse chronological order
        
      responses:
        "200": 
          description: Stream of photos
          content: 
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    
                    photoID: 
                      type: integer
                      
                    likes: 
                      type: array
                      items:
                        type: string
                      
                    
                    comments:
                      type: array
                      items: 
                        type: object
                        properties: 
                          user:
                            type: string
                          comment:
                            type: string
                            
                    date: 
                      type: string
                      format: date-time
                      description: Creation date and time
                      
              
              example: {"PhotoId": 100000, 
                        "Likes": ["JohnDoe","CarlSagan"],
                        "Comments": [
                            {"User":"JohnDoe","Comment":"Wow, nice trip!"},
                            {"User":"CarlSagan", "Comment":"Amazing!"}],
                        "Date":"2021-01-30T08:30:00Z",
                        "Followers": ["JohnDoe","KenFollet"]
                        }
                        
        '401':            
          description: Access token is missing or invalid
        '404': 
          description: Resource not found.       
          content:         
            application/json:           
              schema:             
                type: integer             
                example: -1

        


  /images/{identifier}:
    get: 
      parameters:
      - name: identifier
        schema: 
          type: integer
        in: path
        required: true
        description: Image identifier.
      
      
      summary: Get an specific image searched by its identifier.
      operationId: getImage

      tags: ["getImageById"]

      description: |
        Obtains the raw image. If it does not exist, it returns -1.
        
      responses:
        "200": 
          description: Requested image
          content:
            image/png:
              schema:
                type: string
                format: binary
          
        '401':            
          description: Access token is missing or invalid
        '404': 
          description: Resource not found.       
          content:         
            application/json:           
              schema:             
                type: integer             
                example: -1


  /users/{userId}/getLogo:
    get: 
      parameters:
      - name: userId
        schema: 
          type: integer
        in: path
        required: true
        description: userId
      
      tags: ["getLogo"]
      summary: Get logo of a user specified by parameter
      operationId: getLogo
      description: |
        Obtains the raw image. If it does not exist, it returns -1.
        
      responses:
        "200": 
          description: Requested image
          content:
            application/json:
              schema:
                type: object
                properties:
                  file:
                    description: Logo image
                    type: string
                    format: binary

                  title:
                    description: Logo title
                    type: string
        
        '401':            
          description: Access token is missing or invalid
        '404': 
          description: Resource not found.       
          content:         
            application/json:           
              schema:             
                type: integer             
                example: -1

        


  
                
  /users/{userId}/uploadPhoto:
    post:
      parameters:
      - name: userId
        schema: 
          type: integer
        in: path
        required: true
        description: userId

    
      tags: ["uploadPhoto"]
      summary: Uploads a photo by the user
      description: |-
        Uploads a photo by the logged user and it appends to the beginning of the list. 
        
      operationId: uploadPhoto
      requestBody:
        description: User photo upload
        content:
          image/png:
            schema:
              type: string
              format: binary
        required: true


      responses:
        '201': 
          description: Successful operation
          content:
            application/json:
              schema:
                type: integer
                example: 1
        '401':            
          description: Access token is missing or invalid
        '404': 
          description: Resource not found.       
          content:         
            application/json:           
              schema:             
                type: integer             
                example: -1




  /users/{userId}/commentPhoto/{photoId}:
    post:
      parameters:
      - name: userId
        schema: 
          type: integer
        in: path
        required: true
        description: userId
        
      - name: photoId
        schema: 
          type: integer
        in: path
        required: true
        description: ID of the photo to be commented
        
        
      
      
      tags: ["commentPhoto"]
      summary: Comments a photo of a user
      description: |-
        The logged user comments a photo of another user. Each photo has a unique identifier, so we won't have to specify the user.
        
      operationId: commentPhoto
      requestBody:
        description: Comment to be added to the requested photo.
        content:
          
          text/plain:
            schema:
              type: string
              description: Photo comment.
              example: "Wow, such a nice picture!"
        required: true


      responses:
        '201': 
          description: Successful operation
          content:
            application/json:
              schema:
                type: integer
                example: 1
                
                
        '401':            
          description: Access token is missing or invalid
        '404': 
          description: Resource not found.       
          content:         
            application/json:           
              schema:             
                type: integer             
                example: -1



  /users/{userId}/likePhoto/{photoId}:
    put:
      parameters:
      - name: userId
        schema: 
          type: integer
        in: path
        required: true
        description: userId
        
      - name: photoId
        schema: 
          type: integer
        in: path
        required: true
        description: ID of the photo to be liked
        
        
      
      
      tags: ["likePhoto"]
      summary: Likes a photo of a user
      description: |-
        The logged user likes a photo of another user. Each photo has a unique identifier, so we won't have to specify the user.
        
      operationId: likePhoto
    

      responses:
        '201': 
          description: Successful operation
          content:
            application/json:
              schema:
                type: integer
                example: 1
        '401':            
          description: Access token is missing or invalid
        '404': 
          description: Resource not found.       
          content:         
            application/json:           
              schema:             
                type: integer             
                example: -1

                
                
  /users/{userId}/setMyUserName:
    put:
      parameters:
      - name: userId
        schema: 
          type: integer
        in: path
        required: true
        description: userId
        
      
      tags: ["setMyUserName"]
      summary: Given the user ID, changes username of the user
      description: |-
        The logged user changes its username. It returns 0 if it has been correctly updated, or -1 if an error has occurred.
        
      operationId: setMyUserName
      
      requestBody:
        description: User name
        content:
          application/json:
            schema:
              type: string
              example: "Maria"
              readOnly: true
              minLength: 3
              maxLength: 16
        required: true

      responses:
        '201': 
          description: Successful operation
          content:
            application/json:
              schema:
                type: integer
                example: 1
        '401':            
          description: Access token is missing or invalid
        '404': 
          description: Resource not found.       
          content:         
            application/json:           
              schema:             
                type: integer             
                example: -1

                
                

  /users/{userId}/followUser/{userFollowed}:
    put:
      parameters:
      - name: userId
        schema: 
          type: integer
        in: path
        required: true
        description: userId
        
      - name: userFollowed
        schema: 
          type: integer
        in: path
        required: true
        description: user to be followed

      
      tags: ["followUser"]
      summary: Given a user ID, the logged user follows it.
      description: |-
        The logged user follows the user identified by the parameter. It returns 0 if it has been correctly followed, or -1 if an error has occurred (already followed or not found).
        
      operationId: followUser
      

      responses:
        '201': 
          description: Successful operation
          content:
            application/json:
              schema:
                type: integer
                example: 1
        '401':            
          description: Access token is missing or invalid
        '404': 
          description: Resource not found.       
          content:         
            application/json:           
              schema:             
                type: integer             
                example: -1

                
  /users/{userId}/banUser/{userBanned}:
    put:
      parameters:
      - name: userId
        schema: 
          type: integer
        in: path
        required: true
        description: user logged

      - name: userBanned
        schema: 
          type: integer
        in: path
        required: true
        description: user to be banned
        
      
      tags: ["banUser"]
      summary: Given a user ID, the logged user bans it.
      description: |-
        The logged user bans the user identified by the parameter. It returns 0 if it has been correctly banned, or -1 if an error has occurred (already banned or not found).
        
      operationId: banUser
      

      responses:
        '201': 
          description: Successful operation
          content:
            application/json:
              schema:
                type: integer
                example: 1
        '401':            
          description: Access token is missing or invalid
        '404': 
          description: Resource not found.       
          content:         
            application/json:           
              schema:             
                type: integer             
                example: -1

  
  /users/{userId}/unfollowUser/{unfollowedUserId}:
    delete:
      parameters:
      - name: userId
        schema: 
          type: integer
        in: path
        required: true
        description: user logged
        
      - name: unfollowedUserId
        schema: 
          type: integer
        in: path 
        required: true
        description: user to be unfollowed

        
      
      
      tags: ["unfollowUser"]
      summary: Given a user ID, the logged user unfollows it.
      description: |-
        The logged user unfollows the user identified by the parameter. This operation accesses to the user's followers collection and deletes it. It returns 0 if it has been correctly unfollowed, or -1 if an error has occurred (previously not followed or not found).
        
      operationId: unfollowUser
      

      responses:
        '201': 
          description: Successful operation
          content:
            application/json:
              schema:
                type: integer
                example: 1
        '401':            
          description: Access token is missing or invalid
        '404': 
          description: Resource not found.       
          content:         
            application/json:           
              schema:             
                type: integer             
                example: -1



  /users/{userId}/unbanUser/{bannedUserId}:
    delete:
      parameters:
      - name: userId
        schema: 
          type: integer
        in: path
        required: true
        description: user logged
        
      - name: bannedUserId
        schema: 
          type: integer
        in: path 
        required: true
        description: user to be unbanned

        
      
      
      tags: ["unbanUser"]
      summary: Given a user ID, the logged user unbans it (it deletes it from the list of banned users)
      description: |-
        The logged user unbans the user identified by the parameter. It returns 0 if it has been correctly unbanned, or -1 if an error has occurred (previously not banned or not found).
        
      operationId: unbanUser
      

      responses:
        '201': 
          description: Successful operation
          content:
            application/json:
              schema:
                type: integer
                example: 1
        '401': 
          description: Access token is missing or invalid
        '404': 
          description: Resource not found.       
          content:         
            application/json:           
              schema:             
                type: integer             
                example: -1


  /users/{userId}/unlikePhoto/{photoId}:
    delete:
      parameters:
      - name: userId
        schema: 
          type: integer
        in: path
        required: true
        description: user logged
        
      - name: photoId
        schema: 
          type: integer
        in: path 
        required: true
        description: photo to be unliked

        
      
      
      tags: ["unlikePhoto"]
      summary: Given a user ID and a photo Id, the logged user unlikes it 
      description: |-
        The logged user deletes the logged user from the photo's list of users likes. 
        It returns 0 if it has been correctly unliked, or -1 if an error has occurred (previously not liked, userId or photoId not found).
        
      operationId: unlikePhoto
      

      responses:
        '201': 
          description: Successful operation
          content:
            application/json:
              schema:
                type: integer
                example: 1
        '401': 
          description: Access token is missing or invalid
        '404': 
          description: Resource not found.       
          content:         
            application/json:           
              schema:             
                type: integer             
                example: -1


  /users/{userId}/uncommentPhoto/{photoId}:
    delete:
      parameters:
      - name: userId
        schema: 
          type: integer
        in: path
        required: true
        description: user logged
        
      - name: photoId
        schema: 
          type: integer
        in: path
        required: true
        description: ID of the photo to be uncommented

        
      
      
      tags: ["uncommentPhoto"]
      summary: Given a user ID and a photo Id, the logged user uncomments it 
      description: |-
        The logged user deletes the comment from the photo's list of comments. 
        It returns 0 if it has been correctly uncommented, or -1 if an error has occurred (previously not commented, userId or photoId not found).
        
      operationId: uncommentPhoto
      

      responses:
        '201': 
          description: Successful operation
          content:
            application/json:
              schema:
                type: integer
                example: 1
        '401': 
          description: Access token is missing or invalid
        '404': 
          description: Resource not found.       
          content:         
            application/json:           
              schema:             
                type: integer             
                example: -1

  /users/{userId}/deletePhoto/{photoId}:
    delete:
      parameters:
      - name: userId
        schema: 
          type: integer
        in: path
        required: true
        description: user logged
        
      - name: photoId
        schema: 
          type: integer
        in: path
        required: true
        description: ID of the photo to be deleted

        
      
      
      tags: ["deletePhoto"]
      summary: Given a user ID and a photo Id, the logged user deletes it from its stream 
      description: |-
        The logged user deletes the photo from its stream. 
        It returns 0 if it has been correctly deleted, or -1 if an error has occurred (userId or photoId not found).
        
      operationId: deletePhoto
      

      responses:
        '201': 
          description: Successful operation
          content:
            application/json:
              schema:
                type: integer
                example: 1
        
        '401': 
          description: Access token is missing or invalid
          
        '404': 
          description: Resource not found.       
          content:         
            application/json:           
              schema:             
                type: integer             
                example: -1



  
components:

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer


    
security:
  - bearerAuth: []
      
      